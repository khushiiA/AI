from sklearn import datasets

#Load dataset
cancer = datasets.load_breast_cancer()



print("Features: ", cancer.feature_names)

# print the label type of cancer('malignant' 'benign')
print("Labels: ", cancer.target_names)



cancer.data.shape



print(cancer.target)



from sklearn.model_selection import train_test_split

# Split dataset into training set and test set
X_train, X_test, y_train, y_test = train_test_split(cancer.data, cancer.target, test_size=0.3,random_state=109)



from sklearn import svm

#Create a svm Classifier
clf = svm.SVC(kernel='linear') # Linear Kernel

#Train the model using the training sets
clf.fit(X_train, y_train)

#Predict the response for test dataset
y_pred = clf.predict(X_test)



from sklearn import metrics

# Model Accuracy: how often is the classifier correct?
print("Accuracy:",metrics.accuracy_score(y_test, y_pred))



//naive bayes
from sklearn.naive_bayes import GaussianNB
classifier = GaussianNB()
classifier.fit(X_train, y_train)

#Predict the response for test dataset
y1_pred = classifier.predict(X_test)



from sklearn import metrics

# Model Accuracy: how often is the classifier correct?
print("Accuracy:",metrics.accuracy_score(y_test, y1_pred))



//knn
from sklearn.neighbors import KNeighborsClassifier
classifier = KNeighborsClassifier(n_neighbors = 5, metric = 'minkowski', p = 2)
classifier.fit(X_train, y_train)
y2_pred = classifier.predict(X_test)
print("Accuracy:",metrics.accuracy_score(y_test, y2_pred))



//decision tree
from sklearn.tree import DecisionTreeClassifier
classifier = DecisionTreeClassifier(criterion = 'entropy', random_state = 0)
classifier.fit(X_train, y_train)
y3_pred = classifier.predict(X_test)
print("Accuracy:",metrics.accuracy_score(y_test, y3_pred))



//random forest
from sklearn.ensemble import RandomForestClassifier
classifier = RandomForestClassifier(n_estimators = 10, criterion = 'entropy', random_state = 0)
classifier.fit(X_train, y_train)
y3_pred = classifier.predict(X_test)
print("Accuracy:",metrics.accuracy_score(y_test, y3_pred))


/* https://colab.research.google.com/drive/14lri7qTCUMc3ny7h5TkLHKXPYkWQzgsa?usp=sharing */



